def match(request,pk,pk1,pk2,m,l):
    q = question.objects.all()
    level = module_level.objects.get(pk=l)
    module = program_module.objects.get(pk=m)
    idbr =   
    for j in q:
        if(level==j.level and (module==j.level.module and j.question_type_id == 1) ):
            print(j.level,j.level.module,j.narrative,j.question_type,j.question,j.question.option_description,j.question_type_id,j.question_id)
            idbr.append(j.question_id)
    print(idbr)
    print('-------------------------------------------------------') 
    ques = question.objects.filter(question_type_id=1,question_id__in=idbr)
    if(ques):
        ids =   
        for i in ques:
            ids.append(i.question_id)
        ans = question_option.objects.filter(question__in=idbr)
        colq =   
        cola =   
        options =   
        for i in ans:
            colq.append(str(i.question))
            cola.append(str(i.option_description))
        options = random.sample(range(0,len(cola)),len(cola))
        rans =   
        final_options =   
        for i in range(0,len(cola)):
            rans.append(cola options i  )
        for i in range(0,len(cola)):
            for j in range(0,len(cola)):
                if(cola i ==rans j ):
                    final_options.append(j+1)            
        return render(request,"match/match25.html",{"pk":pk,"pk1":pk1,"pk2":pk2,"m":module,"l":level,'cola':rans,'colq':colq,'final_options':final_options,'empty':True})
    else:
        return render(request,"match/match25.html",{"pk":pk,"pk1":pk1,"pk2":pk2,"m":module,"l":level,'empty':False})